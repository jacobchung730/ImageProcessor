import java.util.ArrayList;
import java.util.List;
import model.CheckerboardImage;
import model.filter.IFilter;
import model.filter.Sharpen;
import model.filter.Blur;
import model.IImage;
import model.Image;
import model.Pixel;
import model.Posn;
import org.junit.Test;
import static org.junit.Assert.assertEquals;

/**
 * Tests for the Sharpen filter.
 */
public class SharpenTest {

  private IFilter sharpen1 = new Sharpen();
  private IImage checkerboard = new CheckerboardImage(1, 2, 2).createCheckerboard();
  private IImage imageAllZero = new Image(buildCustomImageGridAllZero(), 255);


  private List<List<Pixel>> buildCustomImageGridAllZero() {
    List<List<Pixel>> expected = new ArrayList<>();
    List<Pixel> row1 = new ArrayList<>();
    row1.add(new Pixel(0, 0, 0, new Posn(0, 0)));
    row1.add(new Pixel(0, 0, 0, new Posn(1, 0)));
    List<Pixel> row2 = new ArrayList<>();
    row2.add(new Pixel(0, 0, 0, new Posn(0, 1)));
    row2.add(new Pixel(0, 0, 0, new Posn(1, 1)));
    expected.add(row1);
    expected.add(row2);
    return expected;
  }


  @Test
  public void testSharpenImageWithAllZero() {
    IImage newImage = this.sharpen1.applyFilter(imageAllZero);
    List<List<Pixel>> result = new ArrayList<>();
    List<Pixel> row1 = new ArrayList<>();
    // white pixels after sharpening will be clamped to 255
    row1.add(new Pixel(0, 0, 0, new Posn(0, 0)));
    row1.add(new Pixel(0, 0, 0, new Posn(1, 0)));
    List<Pixel> row2 = new ArrayList<>();
    row2.add(new Pixel(0, 0, 0, new Posn(0, 1)));
    row2.add(new Pixel(0, 0, 0, new Posn(1, 1)));

    result.add(row1);
    result.add(row2);
    IImage resultImage = new Image(result, 255);

    assertEquals(resultImage, newImage);
  }



  @Test
  public void testSharpen5x5PixelImage() {
    IImage newImage = this.sharpen1.applyFilter(new Image("test/TestPPMImages/LowRes5x5.ppm"));
    List<List<Pixel>> result = new ArrayList<>();

    List<Pixel> row1 = new ArrayList<>();
    row1.add(new Pixel(113, 113, 113, new Posn(0, 0)));
    row1.add(new Pixel(150, 150, 150, new Posn(1, 0)));
    row1.add(new Pixel(113, 113, 113, new Posn(2, 0)));
    row1.add(new Pixel(150, 150, 150, new Posn(3, 0)));
    row1.add(new Pixel(113, 113, 113, new Posn(4, 0)));


    List<Pixel> row2 = new ArrayList<>();
    row2.add(new Pixel(150, 150, 150, new Posn(0, 1)));
    row2.add(new Pixel(213, 213, 213, new Posn(1, 1)));
    row2.add(new Pixel(163, 163, 163, new Posn(2, 1)));
    row2.add(new Pixel(213, 213, 213, new Posn(3, 1)));
    row2.add(new Pixel(150, 150, 150, new Posn(4, 1)));

    List<Pixel> row3 = new ArrayList<>();
    row3.add(new Pixel(113, 113, 113, new Posn(0, 2)));
    row3.add(new Pixel(163, 163, 163, new Posn(1, 2)));
    row3.add(new Pixel(100, 100, 100, new Posn(2, 2)));
    row3.add(new Pixel(163, 163, 163, new Posn(3, 2)));
    row3.add(new Pixel(113, 113, 113, new Posn(4, 2)));

    List<Pixel> row4 = new ArrayList<>();
    row4.add(new Pixel(150, 150, 150, new Posn(0, 3)));
    row4.add(new Pixel(213, 213, 213, new Posn(1, 3)));
    row4.add(new Pixel(163, 163, 163, new Posn(2, 3)));
    row4.add(new Pixel(213, 213, 213, new Posn(3, 3)));
    row4.add(new Pixel(150, 150, 150, new Posn(4, 3)));

    List<Pixel> row5 = new ArrayList<>();
    row5.add(new Pixel(113, 113, 113, new Posn(0, 4)));
    row5.add(new Pixel(150, 150, 150, new Posn(1, 4)));
    row5.add(new Pixel(113, 113, 113, new Posn(2, 4)));
    row5.add(new Pixel(150, 150, 150, new Posn(3, 4)));
    row5.add(new Pixel(113, 113, 113, new Posn(4, 4)));

    result.add(row1);
    result.add(row2);
    result.add(row3);
    result.add(row4);
    result.add(row5);

    IImage resultImage = new Image(result, 255);

    assertEquals(resultImage, newImage);
  }


  @Test
  public void testSharpenSmallCheckerboard() {
    IImage newImage = this.sharpen1.applyFilter(this.checkerboard);
    List<List<Pixel>> result = new ArrayList<>();
    List<Pixel> row1 = new ArrayList<>();
    // white pixels after sharpening will be clamped to 255
    row1.add(new Pixel(255, 255, 255, new Posn(0, 0)));
    row1.add(new Pixel(128, 128, 128, new Posn(1, 0)));
    List<Pixel> row2 = new ArrayList<>();
    row2.add(new Pixel(128, 128, 128, new Posn(0, 1)));
    row2.add(new Pixel(255, 255, 255, new Posn(1, 1)));

    result.add(row1);
    result.add(row2);
    IImage resultImage = new Image(result, 255);

    assertEquals(resultImage, newImage);
  }

  @Test (expected = IllegalArgumentException.class)
  public void testNullImage() {
    this.sharpen1.applyFilter(null);
  }


  // sharpened an image that has already been blurred
  @Test
  public void testSharpenABlurredImage() {

    IImage newImage = new Blur().applyFilter(this.checkerboard);

    List<List<Pixel>> result = new ArrayList<>();
    List<Pixel> row1 = new ArrayList<>();
    row1.add(new Pixel(80, 80, 80, new Posn(0, 0)));
    row1.add(new Pixel(64, 64, 64, new Posn(1, 0)));
    List<Pixel> row2 = new ArrayList<>();
    row2.add(new Pixel(64, 64, 64, new Posn(0, 1)));
    row2.add(new Pixel(80, 80, 80, new Posn(1, 1)));
    result.add(row1);
    result.add(row2);
    IImage resultImage = new Image(result, 255);

    assertEquals(resultImage, newImage);

    IImage newImage2 = new Sharpen().applyFilter(newImage);

    List<List<Pixel>> result2 = new ArrayList<>();
    List<Pixel> row01 = new ArrayList<>();
    row01.add(new Pixel(132, 132, 132, new Posn(0, 0)));
    row01.add(new Pixel(120, 120, 120, new Posn(1, 0)));
    List<Pixel> row02 = new ArrayList<>();
    row02.add(new Pixel(120, 120, 120, new Posn(0, 1)));
    row02.add(new Pixel(132, 132, 132, new Posn(1, 1)));
    result2.add(row01);
    result2.add(row02);
    IImage resultImage2 = new Image(result2, 255);

    assertEquals(resultImage2, newImage2);




  }


}
